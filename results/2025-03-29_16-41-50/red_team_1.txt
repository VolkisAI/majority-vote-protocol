def max_painted_sections(n, q, painters):
    # Initialize an array to count coverage of each section
    coverage = [0] * (n + 1)
    
    # Calculate the initial coverage with all painters
    for l, r in painters:
        for i in range(l, r + 1):
            coverage[i] += 1
    
    # Calculate the total number of initially painted sections
    total_painted = sum(1 for i in range(1, n + 1) if coverage[i] > 0)
    
    # Calculate the effect of removing each painter
    single_removal_effect = []
    for l, r in painters:
        effect = 0
        for i in range(l, r + 1):
            if coverage[i] == 1:
                effect += 1
        single_removal_effect.append(effect)
    
    # Calculate the effect of removing each pair of painters
    max_painted = 0
    for i in range(q):
        for j in range(i + 1, q):
            l1, r1 = painters[i]
            l2, r2 = painters[j]
            effect = single_removal_effect[i] + single_removal_effect[j]
            
            # Calculate overlap effect
            overlap_effect = 0
            for x in range(max(l1, l2), min(r1, r2) + 1):
                if coverage[x] == 2:
                    overlap_effect += 1
            
            # Calculate the number of painted sections if these two painters are removed
            painted_if_removed = total_painted - effect + overlap_effect
            max_painted = max(max_painted, painted_if_removed)
    
    return max_painted

# Read input
n, q = map(int, input().split())
painters = [tuple(map(int, input().split())) for _ in range(q)]

# Output the result
print(max_painted_sections(n, q, painters))